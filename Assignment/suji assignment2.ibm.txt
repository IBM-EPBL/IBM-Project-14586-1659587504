#Import all libraries
import numpy as np 
import pandas as pd 
import seaborn as sns 
import math
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn import preprocessing
from imblearn.over_sampling import RandomOverSampler
from collections import Counter
from sklearn.preprocessing import OrdinalEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import plot_roc_curve
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import classification_report
from scipy.stats import boxcox
------------------------
#load data and view first 5 rows
dataset = pd.read_csv('../input/churn-modelling/Churn_Modelling.csv')
dataset.head(5)
-------------------------------
#number of rows and attributes
dataset.shape
---------------------------------
#drop unusable attributes for further analysis
dataset = dataset.drop(labels=['RowNumber', 'Surname'], axis=1)
------------------------------------
Exploratory data analysis
#check for missing values
print("Missing values in the train dataset:\n\n",dataset.isna().sum())
------------------------------------
#create a list of categorical features
list_of_cat_features = dataset[['Geography', 'Gender', 'Tenure', 'NumOfProducts', 'HasCrCard', 'IsActiveMember']]  
palette_features = ['#E68753', '#409996']

for feature in list_of_cat_features:
    plt.figure(figsize=(12,6.5)) 
    plt.title(feature, fontsize=15, fontweight='bold', fontname='Helvetica', ha='center')
    ax = sns.countplot(x = list_of_cat_features[feature], hue = 'Exited', data = dataset, palette=palette_features)
---------------------------------
list_of_num_features = dataset[['Age', 'CreditScore', 'Balance', 'EstimatedSalary']]  
palette_features = ['#E68753', '#409996']

for feature in list_of_num_features:
    plt.figure(figsize=(12,6.5)) 
    plt.title(feature, fontsize=15, fontweight='bold', fontname='Helvetica', ha='center')
    ax = sns.boxplot(x = dataset['Exited'], y = list_of_num_features[feature], data = dataset, palette=palette_features)
--------------------------------------
dataset['Age'] = boxcox(dataset['Age'])[0]

plt.figure(figsize=(12,6.5)) 
plt.title('Age', fontsize=15, fontweight='bold', fontname='Helvetica', ha='center')
ax = sns.boxplot(x=dataset['Exited'], y = dataset['Age'], data = dataset, palette=palette_features)
-----------------------------------------

#Exited = target variable
plt.figure(figsize=(12,6))
plt.title("Imbalanced target variable", fontsize=15, fontweight='bold', fontname='Helvetica', ha='center')
ax = sns.countplot(x=dataset['Exited'], data=dataset, palette=palette_features)

#add labels to each bar
abs_values = dataset['Exited'].value_counts(ascending=False).values
ax.bar_label(container=ax.containers[0], labels=abs_values) 

#show the plot
plt.show()
----------------------------
# plotting heatmap to notice correlations between fetures
corr = dataset.corr()

plt.figure(figsize = (20, 12))
sns.heatmap(corr, linewidths = 4, annot = True, fmt = ".2f", cmap="BrBG")
plt.show()
---------------------------
#transform all categorical attributes into numerical
cat_columns = [cname for cname in dataset.columns
                        if dataset[cname].dtype == 'object']

encoder = preprocessing.LabelEncoder()

for col in cat_columns:
    dataset[col] = encoder.fit_transform(dataset[col])
    
dataset.head()
--------------------------------
#balancing the target variable
columns = ['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'EstimatedSalary', 'Exited']
columns = [c for c in columns if c not in ['Exited']]
y = dataset['Exited'] #prior target variable
X = dataset[columns]  #prior features

ros = RandomOverSampler(sampling_strategy='minority')
X_train_balanced, y_train_balanced = ros.fit_resample(X, y) #y_train as balanced target variable
print(f"Imbalanced target class: {Counter(y)}\n\nBalanced target class: {Counter(y_train_balanced)}\n")
print(X_train_balanced.shape[0] - dataset.shape[0], 'new random picked points')
-----------------------------------
#plot the balanced target variable
plt.figure(figsize=(12,6))
plt.title("Balanced target variable", fontsize=15, fontweight='bold', fontname='Helvetica', ha='center')
ax = sns.countplot(x=y_train_balanced, data=dataset, palette=palette_features)
plt.show()
--------------------------
#preparation of train and test data for ML models
X_train,X_test,y_train,y_test = train_test_split(X_train_balanced, y_train_balanced,test_size=0.3, random_state = 1) #70 % of train data, 30 % of test data
X_train.shape,X_test.shape,y_train.shape,y_test.shape

